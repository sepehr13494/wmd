// Mocks generated by Mockito 5.3.2 from annotations
// in wmd/test/features/dashboard/user_status/presentation/user_state_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wmd/core/domain/usecases/usercase.dart' as _i8;
import 'package:wmd/core/error_and_success/failures.dart' as _i6;
import 'package:wmd/features/dashboard/user_status/data/models/user_status.dart'
    as _i7;
import 'package:wmd/features/dashboard/user_status/domain/repositories/user_status_repository.dart'
    as _i2;
import 'package:wmd/features/dashboard/user_status/domain/use_cases/get_user_status_usecase.dart'
    as _i4;
import 'package:wmd/features/dashboard/user_status/domain/use_cases/put_user_status_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserStatusRepository_0 extends _i1.SmartFake
    implements _i2.UserStatusRepository {
  _FakeUserStatusRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUserStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserStatusUseCase extends _i1.Mock
    implements _i4.GetUserStatusUseCase {
  MockGetUserStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserStatusRepository get dashboardRepository => (super.noSuchMethod(
        Invocation.getter(#dashboardRepository),
        returnValue: _FakeUserStatusRepository_0(
          this,
          Invocation.getter(#dashboardRepository),
        ),
      ) as _i2.UserStatusRepository);
  @override
  bool get showOnboarding => (super.noSuchMethod(
        Invocation.getter(#showOnboarding),
        returnValue: false,
      ) as bool);
  @override
  set showOnboarding(bool? _showOnboarding) => super.noSuchMethod(
        Invocation.setter(
          #showOnboarding,
          _showOnboarding,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userEmail(String? _userEmail) => super.noSuchMethod(
        Invocation.setter(
          #userEmail,
          _userEmail,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>>.value(
            _FakeEither_1<_i6.Failure, _i7.UserStatus>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>>);
  @override
  void cache(_i3.Either<_i6.Failure, _i7.UserStatus>? temp) =>
      super.noSuchMethod(
        Invocation.method(
          #cache,
          [temp],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PutUserStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPutUserStatusUseCase extends _i1.Mock
    implements _i9.PutUserStatusUseCase {
  MockPutUserStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserStatusRepository get dashboardRepository => (super.noSuchMethod(
        Invocation.getter(#dashboardRepository),
        returnValue: _FakeUserStatusRepository_0(
          this,
          Invocation.getter(#dashboardRepository),
        ),
      ) as _i2.UserStatusRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>> call(
          _i7.UserStatus? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>>.value(
            _FakeEither_1<_i6.Failure, _i7.UserStatus>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.UserStatus>>);
}
