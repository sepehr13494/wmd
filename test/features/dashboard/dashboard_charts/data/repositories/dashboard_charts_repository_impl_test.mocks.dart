// Mocks generated by Mockito 5.3.2 from annotations
// in wmd/test/features/dashboard/dashboard_charts/data/repositories/dashboard_charts_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wmd/core/error_and_success/failures.dart' as _i12;
import 'package:wmd/features/dashboard/dashboard_charts/data/data_sources/dashboard_charts_remote_datasource.dart'
    as _i3;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_allocation_params.dart'
    as _i6;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_allocation_response.dart'
    as _i5;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_geographic_params.dart'
    as _i8;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_geographic_response.dart'
    as _i7;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_pie_params.dart'
    as _i10;
import 'package:wmd/features/dashboard/dashboard_charts/data/models/get_pie_response.dart'
    as _i9;
import 'package:wmd/features/dashboard/dashboard_charts/domain/entities/get_allocation_entity.dart'
    as _i13;
import 'package:wmd/features/dashboard/dashboard_charts/domain/entities/get_geographic_entity.dart'
    as _i14;
import 'package:wmd/features/dashboard/dashboard_charts/domain/entities/get_pie_entity.dart'
    as _i15;
import 'package:wmd/features/dashboard/dashboard_charts/domain/repositories/dashboard_charts_repository.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DashboardChartsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardChartsRemoteDataSource extends _i1.Mock
    implements _i3.DashboardChartsRemoteDataSource {
  MockDashboardChartsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.GetAllocationResponse>> getAllocation(
          _i6.GetAllocationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllocation,
          [params],
        ),
        returnValue: _i4.Future<List<_i5.GetAllocationResponse>>.value(
            <_i5.GetAllocationResponse>[]),
      ) as _i4.Future<List<_i5.GetAllocationResponse>>);
  @override
  _i4.Future<List<_i7.GetGeographicResponse>> getGeographic(
          _i8.GetGeographicParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGeographic,
          [params],
        ),
        returnValue: _i4.Future<List<_i7.GetGeographicResponse>>.value(
            <_i7.GetGeographicResponse>[]),
      ) as _i4.Future<List<_i7.GetGeographicResponse>>);
  @override
  _i4.Future<List<_i9.GetPieResponse>> getPie(_i10.GetPieParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPie,
          [params],
        ),
        returnValue:
            _i4.Future<List<_i9.GetPieResponse>>.value(<_i9.GetPieResponse>[]),
      ) as _i4.Future<List<_i9.GetPieResponse>>);
}

/// A class which mocks [DashboardChartsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDashboardChartsRepository extends _i1.Mock
    implements _i11.DashboardChartsRepository {
  MockDashboardChartsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i12.Failure, List<_i13.GetAllocationEntity>>> getAllocation(
          _i6.GetAllocationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllocation,
          [params],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i12.Failure, List<_i13.GetAllocationEntity>>>.value(
            _FakeEither_0<_i12.Failure, List<_i13.GetAllocationEntity>>(
          this,
          Invocation.method(
            #getAllocation,
            [params],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i12.Failure, List<_i13.GetAllocationEntity>>>);
  @override
  _i4.Future<
      _i2.Either<_i12.Failure, List<_i14.GetGeographicEntity>>> getGeographic(
          _i8.GetGeographicParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGeographic,
          [params],
        ),
        returnValue: _i4.Future<
                _i2.Either<_i12.Failure, List<_i14.GetGeographicEntity>>>.value(
            _FakeEither_0<_i12.Failure, List<_i14.GetGeographicEntity>>(
          this,
          Invocation.method(
            #getGeographic,
            [params],
          ),
        )),
      ) as _i4
          .Future<_i2.Either<_i12.Failure, List<_i14.GetGeographicEntity>>>);
  @override
  _i4.Future<_i2.Either<_i12.Failure, List<_i15.GetPieEntity>>> getPie(
          _i10.GetPieParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPie,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i12.Failure, List<_i15.GetPieEntity>>>.value(
                _FakeEither_0<_i12.Failure, List<_i15.GetPieEntity>>(
          this,
          Invocation.method(
            #getPie,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i12.Failure, List<_i15.GetPieEntity>>>);
}
