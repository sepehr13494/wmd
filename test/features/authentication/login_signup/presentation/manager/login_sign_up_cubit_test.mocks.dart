// Mocks generated by Mockito 5.3.2 from annotations
// in wmd/test/features/authentication/login_signup/presentation/manager/login_sign_up_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i3;
import 'package:device_info_plus/device_info_plus.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wmd/core/error_and_success/failures.dart' as _i8;
import 'package:wmd/core/error_and_success/succeses.dart' as _i9;
import 'package:wmd/core/util/device_info.dart' as _i5;
import 'package:wmd/features/authentication/login_signup/domain/repositories/login_sign_up_repository.dart'
    as _i2;
import 'package:wmd/features/authentication/login_signup/domain/use_cases/post_login_usecase.dart'
    as _i6;
import 'package:wmd/features/authentication/login_signup/domain/use_cases/post_register_usecase.dart'
    as _i10;
import 'package:wmd/features/authentication/login_signup/domain/use_cases/resend_email_usecase.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginSignUpRepository_0 extends _i1.SmartFake
    implements _i2.LoginSignUpRepository {
  _FakeLoginSignUpRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceInfoPlugin_2 extends _i1.SmartFake
    implements _i4.DeviceInfoPlugin {
  _FakeDeviceInfoPlugin_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppDeviceInfoModel_3 extends _i1.SmartFake
    implements _i5.AppDeviceInfoModel {
  _FakeAppDeviceInfoModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostLoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLoginUseCase extends _i1.Mock implements _i6.PostLoginUseCase {
  MockPostLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginSignUpRepository get loginSignUpRepository => (super.noSuchMethod(
        Invocation.getter(#loginSignUpRepository),
        returnValue: _FakeLoginSignUpRepository_0(
          this,
          Invocation.getter(#loginSignUpRepository),
        ),
      ) as _i2.LoginSignUpRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>> call(
          _i6.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>.value(
            _FakeEither_1<_i8.Failure, _i9.AppSuccess>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>);
}

/// A class which mocks [PostRegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRegisterUseCase extends _i1.Mock
    implements _i10.PostRegisterUseCase {
  MockPostRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginSignUpRepository get loginSignUpRepository => (super.noSuchMethod(
        Invocation.getter(#loginSignUpRepository),
        returnValue: _FakeLoginSignUpRepository_0(
          this,
          Invocation.getter(#loginSignUpRepository),
        ),
      ) as _i2.LoginSignUpRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>> call(
          _i10.RegisterParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>.value(
            _FakeEither_1<_i8.Failure, _i9.AppSuccess>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>);
}

/// A class which mocks [ResendEmailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResendEmailUseCase extends _i1.Mock
    implements _i11.ResendEmailUseCase {
  MockResendEmailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginSignUpRepository get loginSignUpRepository => (super.noSuchMethod(
        Invocation.getter(#loginSignUpRepository),
        returnValue: _FakeLoginSignUpRepository_0(
          this,
          Invocation.getter(#loginSignUpRepository),
        ),
      ) as _i2.LoginSignUpRepository);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>> call(
          _i11.ResendEmailParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>.value(
            _FakeEither_1<_i8.Failure, _i9.AppSuccess>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.AppSuccess>>);
}

/// A class which mocks [AppDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDeviceInfo extends _i1.Mock implements _i5.AppDeviceInfo {
  MockAppDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DeviceInfoPlugin get deviceInfoPlugin => (super.noSuchMethod(
        Invocation.getter(#deviceInfoPlugin),
        returnValue: _FakeDeviceInfoPlugin_2(
          this,
          Invocation.getter(#deviceInfoPlugin),
        ),
      ) as _i4.DeviceInfoPlugin);
  @override
  _i7.Future<_i5.AppDeviceInfoModel> getDeviceInfo() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceInfo,
          [],
        ),
        returnValue:
            _i7.Future<_i5.AppDeviceInfoModel>.value(_FakeAppDeviceInfoModel_3(
          this,
          Invocation.method(
            #getDeviceInfo,
            [],
          ),
        )),
      ) as _i7.Future<_i5.AppDeviceInfoModel>);
}
