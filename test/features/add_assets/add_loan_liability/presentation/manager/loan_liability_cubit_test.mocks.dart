// Mocks generated by Mockito 5.3.1 from annotations
// in wmd/test/features/add_assets/add_loan_liability/presentation/manager/loan_liability_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wmd/core/error_and_success/failures.dart' as _i6;
import 'package:wmd/features/add_assets/add_loan_liability/domain/repositories/loan_liability_repository.dart'
    as _i2;
import 'package:wmd/features/add_assets/add_loan_liability/domain/use_cases/add_loan_liability_usecase.dart'
    as _i4;
import 'package:wmd/features/add_assets/core/domain/entities/add_asset_response.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoanLiabilityRepository_0 extends _i1.SmartFake
    implements _i2.LoanLiabilityRepository {
  _FakeLoanLiabilityRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddLoanLiabilityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddLoanLiabilityUseCase extends _i1.Mock
    implements _i4.AddLoanLiabilityUseCase {
  MockAddLoanLiabilityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoanLiabilityRepository get loanLiabilityRepository =>
      (super.noSuchMethod(
        Invocation.getter(#loanLiabilityRepository),
        returnValue: _FakeLoanLiabilityRepository_0(
          this,
          Invocation.getter(#loanLiabilityRepository),
        ),
      ) as _i2.LoanLiabilityRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.AddAsset>> call(
          Map<String, dynamic>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.AddAsset>>.value(
            _FakeEither_1<_i6.Failure, _i7.AddAsset>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.AddAsset>>);
}
